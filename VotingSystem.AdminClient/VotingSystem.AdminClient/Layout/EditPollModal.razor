@using VotingSystem.AdminClient.ViewModels
@inject IJSRuntime JS

@if (IsOpen)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Poll</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>

                <div class="modal-body">
                    <EditForm Model="EditablePoll" OnValidSubmit="HandleSave">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Question</label>
                            <InputText class="form-control" @bind-Value="EditablePoll.Question" disabled="@(!CanEditAll)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Start Date</label>
                            <input class="form-control" type="datetime-local" @bind="EditablePoll.StartDate" disabled="@(!CanEditAll)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">End Date</label>
                            <input class="form-control" type="datetime-local" @bind="EditablePoll.EndDate" />
                        </div>

                        @if(CanEditAll) {

                            <label class="form-label">Minimum selectable options</label>
                            <InputNumber @bind-Value="EditablePoll.MinVotes" class="form-control"
                                         min="1"
                                         max="@EditablePoll.MaxVotes"
                                         step="1" />

                            <label class="form-label">Maximum selectable options</label>
                            <InputNumber @bind-Value="EditablePoll.MaxVotes" class="form-control"
                                         min="@EditablePoll.MinVotes"
                                         max="@EditablePoll.Options.Count"
                                         step="1" />

                        }

                        @if (CanEditAll)
                        {
                            <div class="mb-3">
                                <label class="form-label">Options</label>

                                @if (EditablePoll.Options != null && EditablePoll.Options.Count > 0)
                                {
                                    @foreach (var option in EditablePoll.Options)
                                    {
                                        <div class="input-group mb-2" @key="option">
                                            <InputText class="form-control" @bind-Value="option.OptionText" />
                                            <button class="btn btn-outline-danger" type="button" @onclick="@(() => RemoveOption(option))">
                                                ❌
                                            </button>
                                        </div>
                                    }
                                }

                                <button class="btn btn-outline-primary btn-sm" type="button" @onclick="AddOption">
                                    ➕ Add Option
                                </button>
                            </div>
                        }

                        @if (EditablePoll.MaxVotes > EditablePoll.Options.Count)
                        {
                            <div class="text-danger">MaxVotes cannot be greater than number of options.</div>
                        }

                        @if (EditablePoll.MinVotes < 1 || EditablePoll.MaxVotes < EditablePoll.MinVotes)
                        {
                            <div class="text-danger">Invalid voting range. MinVotes must be ≥ 1 and ≤ MaxVotes.</div>
                        }



                        <div class="mt-3 text-end">
                            <button class="btn btn-secondary me-2" type="button" @onclick="CloseModal">Cancel</button>
                            <button class="btn btn-primary"
                                    type="submit"
                                    disabled="@(!IsValidPoll())">
                                Save Changes
                            </button>

                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter] public PollViewModel? Poll { get; set; }
    [Parameter] public EventCallback<PollViewModel> OnSave { get; set; }
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private PollViewModel EditablePoll = new();
    private bool CanEditAll => Poll != null && Poll.StartDate > DateTime.UtcNow && !Poll.HasVotes;

    private bool _previousIsOpen;

    protected override void OnParametersSet()
    {
        // Ha IsOpen true-ra váltott és van Poll, akkor inicializálunk
        if (IsOpen && !_previousIsOpen && Poll != null)
        {
            EditablePoll = new PollViewModel
                {
                    Id = Poll.Id,
                    Question = Poll.Question,
                    StartDate = Poll.StartDate,
                    EndDate = Poll.EndDate,
                    MinVotes = Poll.MinVotes,
                    MaxVotes = Poll.MaxVotes,
                    HasVotes = Poll.HasVotes,
                    Options = Poll.Options
                        .Select(o => new PollOptionViewModel
                        {
                            Id = o.Id,
                            OptionText = o.OptionText
                        })
                        .ToList()
                };
            StateHasChanged();
        }

        _previousIsOpen = IsOpen;
    }

    private void AddOption() =>
        EditablePoll.Options.Add(new PollOptionViewModel { OptionText = "" });

    private void RemoveOption(PollOptionViewModel option)
    {
        EditablePoll.Options.Remove(option);
    }


    private async Task HandleSave()
    {
        await OnSave.InvokeAsync(EditablePoll);
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private bool IsValidPoll()
    {
        var now = DateTime.Now;

        return EditablePoll.MinVotes >= 1 &&
               EditablePoll.MaxVotes >= EditablePoll.MinVotes &&
               EditablePoll.MaxVotes <= EditablePoll.Options.Count &&
               EditablePoll.Options.All(o => !string.IsNullOrWhiteSpace(o.OptionText)) &&
               EditablePoll.StartDate > now &&
               EditablePoll.EndDate > now &&
               (EditablePoll.EndDate - EditablePoll.StartDate).TotalMinutes >= 15;
    }


}
